package org.apache.cayenne.testdo.java8.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.Duration;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.PropertyFactory;

/**
 * Class _DurationTestEntity was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DurationTestEntity extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final BaseProperty<Duration> DURATION_VARCHAR = PropertyFactory.createBase("durationVarchar", Duration.class);
    public static final BaseProperty<Duration> DURATION_BIG_INT = PropertyFactory.createBase("durationBigInt", Duration.class);
    public static final BaseProperty<Duration> DURATION_NUMERIC = PropertyFactory.createBase("durationNumeric", Duration.class);
    public static final BaseProperty<Duration> DURATION_DECIMAL = PropertyFactory.createBase("durationDecimal", Duration.class);
    public static final BaseProperty<Duration> DURATION_LONG_VARCHAR = PropertyFactory.createBase("durationLongVarchar", Duration.class);
    public static final BaseProperty<Duration> DURATION_INT = PropertyFactory.createBase("durationInt", Duration.class);

    protected Duration durationVarchar;
    protected Duration durationBigInt;
    protected Duration durationNumeric;
    protected Duration durationDecimal;
    protected Duration durationLongVarchar;
    protected Duration durationInt;


    public void setDurationVarchar(Duration durationVarchar) {
        beforePropertyWrite("durationVarchar", this.durationVarchar, durationVarchar);
        this.durationVarchar = durationVarchar;
    }

    public Duration getDurationVarchar() {
        beforePropertyRead("durationVarchar");
        return this.durationVarchar;
    }

    public void setDurationBigInt(Duration durationBigInt) {
        beforePropertyWrite("durationBigInt", this.durationBigInt, durationBigInt);
        this.durationBigInt = durationBigInt;
    }

    public Duration getDurationBigInt() {
        beforePropertyRead("durationBigInt");
        return this.durationBigInt;
    }

    public void setDurationNumeric(Duration durationNumeric) {
        beforePropertyWrite("durationNumeric", this.durationNumeric, durationNumeric);
        this.durationNumeric = durationNumeric;
    }

    public Duration getDurationNumeric() {
        beforePropertyRead("durationNumeric");
        return this.durationNumeric;
    }

    public void setDurationDecimal(Duration durationDecimal) {
        beforePropertyWrite("durationDecimal", this.durationDecimal, durationDecimal);
        this.durationDecimal = durationDecimal;
    }

    public Duration getDurationDecimal() {
        beforePropertyRead("durationDecimal");
        return this.durationDecimal;
    }

    public void setDurationLongVarchar(Duration durationLongVarchar) {
        beforePropertyWrite("durationLongVarchar", this.durationLongVarchar, durationLongVarchar);
        this.durationLongVarchar = durationLongVarchar;
    }

    public Duration getDurationLongVarchar() {
        beforePropertyRead("durationLongVarchar");
        return this.durationLongVarchar;
    }

    public void setDurationInt(Duration durationInt) {
        beforePropertyWrite("durationInt", this.durationInt, durationInt);
        this.durationInt = durationInt;
    }

    public Duration getDurationInt() {
        beforePropertyRead("durationInt");
        return this.durationInt;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "durationVarchar":
                return this.durationVarchar;
            case "durationBigInt":
                return this.durationBigInt;
            case "durationNumeric":
                return this.durationNumeric;
            case "durationDecimal":
                return this.durationDecimal;
            case "durationLongVarchar":
                return this.durationLongVarchar;
            case "durationInt":
                return this.durationInt;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "durationVarchar":
                this.durationVarchar = (Duration)val;
                break;
            case "durationBigInt":
                this.durationBigInt = (Duration)val;
                break;
            case "durationNumeric":
                this.durationNumeric = (Duration)val;
                break;
            case "durationDecimal":
                this.durationDecimal = (Duration)val;
                break;
            case "durationLongVarchar":
                this.durationLongVarchar = (Duration)val;
                break;
            case "durationInt":
                this.durationInt = (Duration)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.durationVarchar);
        out.writeObject(this.durationBigInt);
        out.writeObject(this.durationNumeric);
        out.writeObject(this.durationDecimal);
        out.writeObject(this.durationLongVarchar);
        out.writeObject(this.durationInt);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.durationVarchar = (Duration)in.readObject();
        this.durationBigInt = (Duration)in.readObject();
        this.durationNumeric = (Duration)in.readObject();
        this.durationDecimal = (Duration)in.readObject();
        this.durationLongVarchar = (Duration)in.readObject();
        this.durationInt = (Duration)in.readObject();
    }

}
