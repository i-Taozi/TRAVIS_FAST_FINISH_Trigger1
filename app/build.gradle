apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.github.triplet.play'
apply plugin: 'org.moallemi.advanced-build-version'

advancedVersioning {
    nameOptions {
        versionMajor 2
        versionMinor 0
        versionPatch 0
    }

    codeOptions {
        versionCodeType org.moallemi.gradle.internal.VersionCodeType.AUTO_INCREMENT_DATE
        dependsOnTasks 'release' // defaultValue
    }
    outputOptions {
        renameOutput true
        nameFormat '${appName}-${buildType}-${versionName}'
    }
}


jacoco {
    toolVersion = '0.8.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "in.tosc.digitaloceanapp"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode advancedVersioning.versionCode
        versionName "0.2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    dataBinding {
        enabled = true
    }
    lintOptions {
        abortOnError false
    }
    useLibrary 'org.apache.http.legacy'

    signingConfigs {
        release {
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

ext {
    supportLibraryVersion = '27.1.1'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation "com.android.support:support-v13:$supportLibraryVersion"
    implementation "com.android.support:design:$supportLibraryVersion"
    implementation "com.android.support:support-v4:$supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$supportLibraryVersion"
    implementation "com.android.support:customtabs:$supportLibraryVersion"
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    implementation 'com.afollestad.material-dialogs:core:0.9.1.0'
    implementation project(path: ':doandroidlib')

//    Use this if you need "unit" tests in the app
//    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'junit:junit:4.12'

    androidTestImplementation('com.android.support.test:runner:1.0.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation('com.android.support.test:rules:1.0.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:3.0.2') {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
        exclude module: 'appcompat-v7'
        exclude module: 'design'
    }
}

play {
    //track can be set to production,alpha or beta
    jsonFile = file('../keys/api-keys.json')
    track = 'production'
}

def props = new Properties()
if (System.getenv('CI') != 'true') {
    props.load(new FileInputStream(rootProject.file("keys/release.properties")))

    android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
    android.signingConfigs.release.storePassword props.keyStorePassword
    android.signingConfigs.release.keyAlias props.keyAlias
    android.signingConfigs.release.keyPassword props.keyAliasPassword
}

